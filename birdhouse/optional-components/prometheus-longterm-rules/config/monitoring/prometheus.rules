groups:
    - name: longterm-metrics-hourly
      interval: 1h
      rules:

        # --- CPU ---
        # Percentage of the time, over the last hour, that all CPUs were working
        # 1 means all CPUs were working all the time, 0 means they were all idle all the time
        - record: instance:cpu_load:avg_rate1h
          expr: avg by(instance) (rate(node_cpu_seconds_total{mode!="idle"}[1h]))
          labels:
            group: longterm-metrics

        # Percentage of the time that CPUs are waiting for IO
        - record: instance:cpu_load_iowait:avg_rate1h
          expr: avg by(instance) (rate(node_cpu_seconds_total{mode="iowait"}[1h]))
          labels:
            group: longterm-metrics

        # Number of threads in the last hour
        - record: instance:node_threads_count:last_1h
          expr: avg by(instance) (avg_over_time(go_threads[1h]))
          labels:
            group: longterm-metrics

        # --- Network ---
        # Bytes sent
        - record: instance:node_network_transmit_bytes_total:sum_rate1h
          expr: sum by(instance) (rate(node_network_transmit_bytes_total[1h]))
          labels:
            group: longterm-metrics

        # Bytes received
        - record: instance:node_network_receive_bytes_total:sum_rate1h
          expr: sum by(instance) (rate(node_network_receive_bytes_total[1h]))
          labels:
            group: longterm-metrics

        # Total download volume in the last 1 hour logged by the prometheus-log-exporter counter
        - record: thredds:kb_transfer_size_kb:increase_1h
          expr: increase(thredds_transfer_size_kb_total[1h])
          labels:
            group: longterm-metrics

        # --- Memory ---
        # Total memory available in the last hour
        - record: instance:node_memory_MemAvailable_bytes:last_1h
          expr: avg by(instance) (avg_over_time(node_memory_MemAvailable_bytes[1h]))
          labels:
            group: longterm-metrics

        # Swap memory use
        - record: instance:node_memory_SwapUsed_percent:last_1h
          expr: avg by(instance) (avg_over_time(node_memory_SwapFree_bytes[1h]))
          labels:
            group: longterm-metrics

        # -- Disks ---
        # Bytes read
        - record: instance:node_disk_read_bytes:sum_rate1h
          expr: sum by(instance) (rate(node_disk_read_bytes_total[1h]))
          labels:
            group: longterm-metrics

        # Bytes written
        - record: instance:node_disk_written_bytes:sum_rate1h
          expr: sum by(instance) (rate(node_disk_written_bytes_total[1h]))
          labels:
            group: longterm-metrics

        # --- Users ---
        # To aggregate user numbers over a month or a year, we need to keep the name labels.

        # JupyterLab container kb writes to disk in the last hour
        - record: name:jupyter_writes_to_disk_kb:last_1h
          expr: (sum by(name) (increase(container_fs_writes_bytes_total{name=~"jupyter-.+"}[1h])) > 0) / 1024
          labels:
            group: longterm-metrics

        # JupyterLab container CPU usage (> 1 minute per hour)
        - record: name:jupyter_cpu_seconds:last_1h
          expr: (sum by(name) (increase(container_cpu_user_seconds_total{name=~"jupyter-.+"}[1h])) > 60)
          labels:
            group: longterm-metrics


    - name: longterm-metrics-daily
      interval: 1d
      rules:
      # Note: `avg_over_time` could be replace by `last_over_time`, the latter having been added in Prometheus 2.26

      # --- System ---
      # Uptime
        - record: instance:node_boot_time_seconds:last_1d
          expr: max by(instance) (time() - max_over_time(node_boot_time_seconds[1d]))
          labels:
            group: longterm-metrics

      # --- Disk space ---
      # Free disk space in the last 24 hours
        - record: instance:node_filesystem_free_bytes:last_1d
          expr: avg by(instance) (min_over_time(node_filesystem_free_bytes[1d]))
          labels:
            group: longterm-metrics

      # Disk size in the last 24 hours
        - record: instance:node_filesystem_size_bytes:last_1d
          expr: avg by(instance) (max_over_time(node_filesystem_size_bytes[1d]))
          labels:
            group: longterm-metrics

      # --- RAM ---
        # Total memory available
        - record: instance:node_memory_MemTotal_bytes:last_1d
          expr: avg by(instance) (max_over_time(node_memory_MemTotal_bytes[1d]))
          labels:
            group: longterm-metrics

        # Swap memory size
        - record: instance:node_memory_SwapTotal_bytes:last_1d
          expr: avg by(instance) (min_over_time(node_memory_SwapTotal_bytes[1d]))
          labels:
            group: longterm-metrics

        # JupyterLab container open
        - record: name:jupyter_container_seen:last_1d
          expr: round(sum by(name) (rate(container_last_seen{name=~"jupyter-.+"}[1d]) > 0.9))
          labels:
            group: longterm-metrics
