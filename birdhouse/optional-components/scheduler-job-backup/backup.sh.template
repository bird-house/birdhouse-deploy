#!/bin/sh

RESTIC_FILE_VARS="
RESTIC_REPOSITORY_FILE
RESTIC_PASSWORD_FILE  
RESTIC_CACERT
RESTIC_TLS_CLIENT_CERT
RESTIC_CACHE_DIR
TMPDIR
AWS_SHARED_CREDENTIALS_FILE
"

extra_args() {
    env -i sh -ac '. /restic.env && env -0' | while IFS='' read -r -d $'\0' line ; do 
        var="${line%%=*}"
        value="${line#*=}"
        # mount repository location if specified in an env variable
        [ "${var}" = "RESTIC_REPOSITORY" ] && [ -n "${value}" ] && [ "${value#*":"}" = "${value}" ] && printf " -v ${value}:${value} "
        # mount repository location if specified in a file
        if [ "${var}" = "RESTIC_REPOSITORY_FILE" ]; then
            repo_loc="$(docker run --rm -v "${value}:/restic-file" "${BASH_IMAGE}" cat /restic-file | xargs)"
            [ -n "${repo_loc}" ] && [ "${repo_loc#*":"}" = "${repo_loc}" ] && printf " -v ${repo_loc}:${repo_loc} "
        fi
        # mount any files specified in the restic env file
        echo "${RESTIC_FILE_VARS}" | grep -q "^[[:space:]]*${var}[[:space:]]*$" && printf " -v ${value}:${value}:ro "
    done 
}

_RESTIC_COMMAND="docker run --rm --env-file /restic.env --env 'RESTIC_PASSWORD_COMMAND=' -v ${SCHEDULER_JOB_BACKUP_VOLUME}:/scheduler-backup $(extra_args) ${SCHEDULER_JOB_BACKUP_RESTIC_IMAGE}"

# initialize the restic repository if it doesn't exist 
if ! $_RESTIC_COMMAND cat config 2>&1 > /dev/null; then
    $_RESTIC_COMMAND init
fi

# backup the scheduler data to the repository
$_RESTIC_COMMAND --verbose backup /scheduler-backup

# forget old snapshots if a policy is enabled
if [ -n "${SCHEDULER_JOB_BACKUP_RESTIC_FORGET_POLICY}" ]; then
    $_RESTIC_COMMAND --verbose forget ${SCHEDULER_JOB_BACKUP_RESTIC_FORGET_POLICY}
    $_RESTIC_COMMAND --verbose prune
fi
