###
# app configuration
# https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
###
# From sample
# https://github.com/bird-house/twitcher/blob/master/development.ini
###

[app:main]
use = egg:pyramid_twitcher

pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
# twitcher not using db, instead employ magpie adapter
sqlalchemy.url = sqlite:///%(here)s/twitcher.sqlite
#sqlalchemy.url = postgresql://${POSTGIS_USER}:${POSTGIS_PASSWORD}@postgis:${POSTGIS_PORT}/twitcher

retry.attempts = 3

# Caching settings for specific sections/functions - improves performance response times of recurring requests
# For caching related to Magpie API endpoints themselves, instead refer to Magpie INI configuration file.
#
#   Although related to Magpie code, cache regions settings executed by 'MagpieAdapter' are running under Twitcher
#   to resolve Access Control Lists (ACL) to services/resources, and must therefore be placed in Twitcher configuration.
#   Caching that takes effect in Twitcher via 'MagpieAdapter' is when requests use the URL endpoint:
#
#       <twitcher.url>/<twitcher.ows_proxy_protected_path>/proxy/<service-name>[/...]
#
# NOTE: Caching will only take effect with Magpie >= 3.7
# Detail:
#   Both 'acl' and 'service' scopes occur on every permission resolution for a given user requesting any access.
#   The difference is that 'acl' applies for every combination of (user/group, service/resource, permissions),
#   while 'service' limits itself to the service name/type resolution from the request path.
#   Since services are not expected to change often, 'service' cache can be safely increased at a much higher refresh
#   interval than 'acl' which should re-validate any permission changes more frequently.
#   Caching can be forced reset/ignored by using the 'Cache-Control: no-cache' header during any corresponding request.
cache.regions = acl, service
cache.type = memory
cache.enabled = true
cache.acl.enabled = true
cache.acl.expire = 20
cache.service.enabled = true
cache.service.expire = 60

# By default, the toolbar only appears for clients from IP addresses
# '127.0.0.1' and '::1'.
# debugtoolbar.hosts = 127.0.0.1 ::1

# twitcher
twitcher.url = ${BIRDHOUSE_PROXY_SCHEME}://${BIRDHOUSE_FQDN}/twitcher
twitcher.adapter = magpie.adapter.MagpieAdapter
twitcher.rpcinterface = false
twitcher.username =
twitcher.password =
twitcher.ows_security = true
twitcher.ows_proxy = true
twitcher.ows_proxy_delegate = false
twitcher.ows_proxy_protected_path = /ows
twitcher.ows_proxy_ssl_verify = ${BIRDHOUSE_VERIFY_SSL}
twitcher.workdir =
twitcher.prefix =

# magpie (for twitcher.adapter)
magpie.url = ${BIRDHOUSE_PROXY_SCHEME}://${BIRDHOUSE_FQDN}/magpie
magpie.secret = ${MAGPIE_SECRET}
magpie.admin_user = ${MAGPIE_ADMIN_USERNAME}
magpie.admin_password = ${MAGPIE_ADMIN_PASSWORD}

###
# wsgi server configuration
###

[alembic]
# path to migration scripts
script_location = twitcher/alembic
file_template = %%(year)d%%(month).2d%%(day).2d_%%(rev)s
# file_template = %%(rev)s_%%(slug)s

[server:main]
use = egg:gunicorn#main
host = 0.0.0.0
port = 8000
timeout = 10
workers = 10
threads = 4

###
# logging configuration
# https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, twitcher, magpie, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_twitcher]
# "level = DEBUG"   logs detailed information about operations/settings (not for production, will leak sensitive data)
# "level = INFO"    reports useful information, not leaking details about settings
# "level = WARN"    only potential problems/unexpected results reported, such as when caching is employed
level = ${TWITCHER_LOG_LEVEL}
handlers =
qualname = TWITCHER

# MagpieAdapter or any other Magpie utilities it employs through Twitcher proxy-adapter security check
[logger_magpie]
# "level = DEBUG"   logs detailed information about operations/settings (not for production, will leak sensitive data)
# "level = INFO"    reports useful information about operations, not leaking details about settings
# "level = WARN"    only potential problems are reported such as missing settings in configuration
level = ${MAGPIE_LOG_LEVEL}
handlers =
qualname = magpie

[logger_sqlalchemy]
# "level = DEBUG"   logs SQL queries, transactions and results
# "level = INFO"    logs SQL queries (data can be identified from query field values)
# "level = WARN"    logs neither (recommended for production systems, avoid anything below unless for dev/debug system)
level = WARN
handlers =
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(threadName)s] %(message)s
