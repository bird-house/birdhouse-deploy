
    location = /weaver-auth {
        internal;
        # note: using 'TWITCHER_VERIFY_PATH' path to avoid performing the request via proxy 'TWITCHER_PROTECTED_PATH'
        # This ensures that access is validated for the user, but does not trigger its access/download twice.
        # It is also more efficient, since less contents are transferred/buffered.
        proxy_pass ${BIRDHOUSE_PROXY_SCHEME}://${BIRDHOUSE_FQDN_PUBLIC}${TWITCHER_VERIFY_PATH}/$request_uri;
        proxy_pass_request_body off;
        proxy_set_header Host $host;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Forwarded-Proto $real_scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host:$server_port;
    }

    location = /${WEAVER_MANAGER_NAME} {
        return 301 /${WEAVER_MANAGER_NAME}/$is_args$args;
    }
    location ~ ^/${WEAVER_MANAGER_NAME}/(.*)$ {
        auth_request /weaver-auth;
        auth_request_set $auth_status $upstream_status;

        # NOTE:
        #   Inject the 'WEAVER_MANAGER_NAME' prefix here to align with 'SCRIPT_NAME' in the docker-compose config.
        #   This is needed to help UI elements resolve the full URI path with proxy service prefixes since the
        #   generated locations returned that must be interpreted/retrieved by the client/browser would otherwise
        #   not be aware of the proxy redirection path prefix, leading to unresolved resources.
        proxy_pass http://weaver:4001/${WEAVER_MANAGER_NAME}/$1$is_args$args;
        proxy_set_header Host $http_host;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $real_scheme;
        proxy_set_header X-Forwarded-Host $http_host:$server_port;
        proxy_buffering off;
    }

    # NOTE:
    #   Redirect to internal network of twitcher with Weaver root endpoint and alias allows to set
    #   the same 'magpie' permissions on the 'weaver' service defined by "WEAVER_MANAGER_NAME".
    #   This allows verification of the same service user/group permissions references regardless
    #   whether the *shortcut* Weaver endpoint, the alias or the explicit 'twitcher' proxy route is used.
    location = ${TWITCHER_PROTECTED_PATH}/${WEAVER_MANAGER_NAME} {
        return 301 /${WEAVER_MANAGER_NAME}/$is_args$args;
    }
    location ~ ^${TWITCHER_PROTECTED_PATH}/${WEAVER_MANAGER_NAME}/(.*)$ {
        return 301 /${WEAVER_MANAGER_NAME}/$is_args$args;
    }

    # optional alternate endpoint to access weaver (see 'components/weaver/default.env')
    ${WEAVER_ALT_PREFIX_PROXY_LOCATION}
