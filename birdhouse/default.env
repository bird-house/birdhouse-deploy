# All env in this default.env can be overridden by env.local.
# All env in this default.env must not depend on any env in env.local.

# Jupyter single-user server images, can be overriden in env.local to have a space separated list of multiple images
export DOCKER_NOTEBOOK_IMAGES="pavics/workflow-tests:210908"

# Name of the image displayed on the JupyterHub image selection page
# Can be overriden in env.local to have a space separated list of multiple images, the name order must correspond
# to the order of the DOCKER_NOTEBOOK_IMAGES variable
export JUPYTERHUB_IMAGE_SELECTION_NAMES="pavics"

export FINCH_IMAGE="birdhouse/finch:version-0.7.7"

export THREDDS_IMAGE="unidata/thredds-docker:4.6.15"

# Cache kartoza/geoserver docker build on pavics org since their tags are
# "moving" tags, meaning not reproducible behavior !
# See https://github.com/kartoza/docker-geoserver/issues/232#issuecomment-808754831
export GEOSERVER_IMAGE="pavics/geoserver:2.19.0-kartoza-build20210329"

export BASH_IMAGE="bash:5.1.4"

# Tag version that will be used to update Magpie API, Magpie CLI, and matching Twitcher with Magpie Adapter
export MAGPIE_VERSION=3.15.1

# Root directory under which all data persistence should be nested under
export DATA_PERSIST_ROOT="/data"

# Folder on the host to persist Jupyter user data (noteboooks, HOME settings)
export JUPYTERHUB_USER_DATA_DIR="${DATA_PERSIST_ROOT}/jupyterhub_user_data"

# Log directory used for the various scheduler tasks
# TODO: use this variable for other references of the log path (only used in the pavics-jupyter-base's .env file for now)
export PAVICS_LOG_DIR=/var/log/PAVICS

# Activates mounting a tutorial-notebooks subfolder that has the same name as the spawned image on JupyterHub
export MOUNT_IMAGE_SPECIFIC_NOTEBOOKS=false

# Path to the file containing the clientID for the google drive extension for jupyterlab
export JUPYTER_GOOGLE_DRIVE_SETTINGS=""

# Jupyter public demo account with limited computing resources for security reasons
export JUPYTER_DEMO_USER="demo"
# Changing any limits requires restarting the jupyter user server
export JUPYTER_DEMO_USER_MEM_LIMIT="2G"  # ex: 2G, 500M
# CPU limit seems not honored by DockerSpawner
export JUPYTER_DEMO_USER_CPU_LIMIT="0.5"  # 50% of 1 CPU

# See config/jupyterhub/custom_templates/login.html.template
export JUPYTER_LOGIN_BANNER_TOP_SECTION=""
export JUPYTER_LOGIN_BANNER_BOTTOM_SECTION=""

# Path to the README.ipynb for welcoming and guiding new users to Jupyterhub.
# If this path is changed, users will have to restart their personal Jupyter
# server for the change to take effect.
export JUPYTERHUB_README=""

# Allow for adding new config or override existing config in
# config/jupyterhub/jupyterhub_config.py.template.
export JUPYTERHUB_CONFIG_OVERRIDE=""

# Folder inside "proxy" container to drop extra monitoring config
export CANARIE_MONITORING_EXTRA_CONF_DIR="/conf.d"

export THREDDS_ORGANIZATION="Birdhouse"

export MAGPIE_DB_NAME="magpiedb"

export VERIFY_SSL="true"

export GEOSERVER_ADMIN_USER="admin"

# # Install the stable plugin specified in
# https://github.com/kartoza/docker-geoserver/blob/master/build_data/stable_plugins.txt
export GEOSERVER_STABLE_EXTENSIONS="grib-plugin,netcdf-plugin,netcdf-out-plugin"

# Install the community edition plugins specified in
# https://github.com/kartoza/docker-geoserver/blob/master/build_data/community_plugins.txt
export GEOSERVER_COMMUNITY_EXTENSIONS="csw-iso-plugin,geopkg-plugin"

export GEOSERVER_DATA_DIR="$DATA_PERSIST_ROOT/geoserver"

# Folder containing ssh deploy keys for all extra git repos
#
# Note when overriding this variable in env.local, do not use HOME environment
# var, use its fully resolved value.  This default value is suitable only for
# backward-compatibility when autodeploy do not run in its own container.
export AUTODEPLOY_DEPLOY_KEY_ROOT_DIR="$HOME/.ssh"

# Daily at 5:07 AM
export AUTODEPLOY_PLATFORM_FREQUENCY="7 5 * * *"

# Hourly
export AUTODEPLOY_NOTEBOOK_FREQUENCY="@hourly"

# Timeout for reading a response from the proxied server.
# Any WPS processes taking longer than this should use async mode.
export PROXY_READ_TIMEOUT_VALUE="240s"

# Content of "location /" in file config/proxy/conf.d/all-services.include.template
# Useful to have a custom homepage.
export PROXY_ROOT_LOCATION="return 302 https://\$host/jupyter/hub/login;"
