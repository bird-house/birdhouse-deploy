# coding: utf-8
import os
import logging

logger = logging.getLogger("canarie-api-config")

MY_SERVER_NAME = 'https://${PAVICS_FQDN_PUBLIC}/canarie'

DATABASE = {
    'filename': '/opt/local/src/CanarieAPI/stats.db',
    'access_log': '/var/log/nginx/access_file.log',
    'log_pid': '/var/run/nginx.pid'
}

SERVICES = {
    'node': {
        'info': {
            'name': 'Node',
            'synopsis': 'Nodes are data, compute and index endpoints accessed through the PAVICS platform or external clients. The Node service is the backend that allows: data storage, harvesting, indexation and discovery of local and federated data; authentication and authorization; server registration and management. Node service is therefore composed of several other services.',
            'version': '1.23.1',
            'releaseTime': '2023-02-13T18:31:02Z',
            'institution': 'Ouranos',
            'researchSubject': 'Climatology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'category': 'Resource/Cloud Management',
            'tags': ['Climatology']
        },
        'stats': {
            'method': '.*',
            'route': '(?!)'
        },
        'redirect': {
            'doc': 'https://pavics-sdi.readthedocs.io/en/latest/arch/backend.html',
            'releasenotes': 'https://github.com/bird-house/birdhouse-deploy/releases',
            'support': 'https://github.com/bird-house/birdhouse-deploy/issues',
            'source': 'https://github.com/bird-house/birdhouse-deploy',
            'tryme': 'https://${PAVICS_FQDN_PUBLIC}',
            'licence': 'https://pavics-sdi.readthedocs.io/en/latest/license.html',
            'provenance': 'https://pavics-sdi.readthedocs.io/en/latest/provenance/index.html'
        },
        'monitoring': {}
    }
}

PLATFORMS = {
    'pavics': {
        'info': {
            'name': 'PAVICS',
            'synopsis': 'The PAVICS (Power Analytics for Visualization of Climate Science) platform is a collection of climate analysis services served through Open Geospatial Consortium (OGC) protocols. These services include data access, processing and visualization. Both data and algorithms can be accessed either programmatically, through OGC-compliant clients such as QGIS or ArcGIS, or a custom web interface.',
            'version': '1.23.1',
            'releaseTime': '2023-02-13T18:31:02Z',
            'institution': 'Ouranos',
            'researchSubject': 'Climatology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'tags': ['Climatology', 'Cloud']
        },
        'stats': {
            'method': '.*',
            'route': '(?!)'
        },
        'redirect': {
            'doc': 'https://pavics-sdi.readthedocs.io/en/latest/arch/backend.html',
            'releasenotes': 'https://github.com/bird-house/birdhouse-deploy/releases',
            'support': 'https://github.com/Ouranosinc/pavics-sdi/issues',
            'source': 'https://github.com/Ouranosinc/pavics-sdi',
            'tryme': 'https://pavics.ouranos.ca',
            'licence': 'https://pavics-sdi.readthedocs.io/en/latest/license.html',
            'provenance': 'https://pavics-sdi.readthedocs.io/en/latest/provenance/index.html',
            'factsheet': 'http://www.canarie.ca/software/pavics'
        },
        'monitoring': {}
    }
}

CANARIE_MONITORING_EXTRA_CONF_DIR = os.environ.get(
    'CANARIE_MONITORING_EXTRA_CONF_DIR', '/bogus-notexist')

CANARIE_STATS_ROUTES=[]

if os.path.exists(CANARIE_MONITORING_EXTRA_CONF_DIR):
    # alphabetically sorted for reproducible override precedence
    for extra_conf in sorted(os.listdir(CANARIE_MONITORING_EXTRA_CONF_DIR)):
        extra_conf_full_path = "{CANARIE_MONITORING_EXTRA_CONF_DIR}/{extra_conf}".format(**locals())
        # only handle files ending with .py
        if os.path.isfile(extra_conf_full_path) and extra_conf_full_path.endswith(".py"):
            logger.info("canarie-api: loading extra config '{extra_conf_full_path}'".format(**locals()))
            execfile(extra_conf_full_path)
        else:
            logger.info("canarie-api: ignoring extra config '{extra_conf_full_path}'".format(**locals()))

if CANARIE_STATS_ROUTES:
    SERVICES['node']['stats']['route'] = '/(' + '|'.join(CANARIE_STATS_ROUTES) + ')/.*'
